name: Build and Push VS Code CLI Docker Image

on:
  schedule:
    - cron: '0 0 * * *'  # 每天午夜触发
  workflow_dispatch:  # 允许手动触发

permissions:
  contents: write  # 允许写入内容

jobs:
  check-version:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check VS Code CLI newest version
        id: check-version
        run: |
          LATEST_RELEASE=$(curl -s https://api.github.com/repos/microsoft/vscode/releases/latest)
          NEW_VERSION=$(echo $LATEST_RELEASE | jq -r '.tag_name')
          echo "New VS Code CLI version: $NEW_VERSION"
          echo "NEW_VERSION=$NEW_VERSION" >> version.env

      - name: Read last built version
        id: read-last-version
        run: |
          if [ -f version.txt ]; then
            LAST_BUILT_VERSION=$(cat version.txt)
          else
            LAST_BUILT_VERSION="none"
          fi
          echo "LAST_BUILT_VERSION=$LAST_BUILT_VERSION" >> version.env
          
      - name: Upload environment file
        uses: actions/upload-artifact@v4
        with:
          name: version-file
          path: version.env  # 上传环境文件

  build-image:
    runs-on: ubuntu-latest
    needs: check-version
    strategy:
      matrix:
        platform: [amd64, arm64]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download environment file
        uses: actions/download-artifact@v4
        with:
          name: version-file  # 下载上传的环境文件

      - name: Load environment variables
        run: |
          set -o allexport; source version.env; set +o allexport
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "LAST_BUILT_VERSION=$LAST_BUILT_VERSION" >> $GITHUB_ENV

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: maojiaxing
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Set architecture variable
        id: set-arch
        run: |
          if [ "${{ matrix.platform }}" == "amd64" ]; then
            echo "ARCH=x64" >> $GITHUB_ENV  # 将 amd64 映射到 x64
          else
            echo "ARCH=${{ matrix.platform }}" >> $GITHUB_ENV  # arm64 保持不变
          fi
          
      - name: Build and push Docker image
        if: ${{ env.NEW_VERSION }} != env.LAST_BUILT_VERSION }}
        run: |
          docker buildx build \
            --platform linux/${{ matrix.platform }} \
            --tag maojiaxing/vscode-cli:${{ matrix.platform }}-${{ env.NEW_VERSION }} \
            --build-arg VSCODE_CLI_PLATFORM=${{ env.ARCH }} \
            --build-arg VSCODE_CLI_VERSION=${{ env.NEW_VERSION }} \
            --file ./Dockerfile \
            --push .
                   
  push-image:
    runs-on: ubuntu-latest
    needs: build-image
    steps:
      - name: Download environment file
        uses: actions/download-artifact@v4
        with:
          name: version-file  # 下载上传的环境文件
          
      - name: Load environment variables
        run: |
          set -o allexport; source version.env; set +o allexport
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "LAST_BUILT_VERSION=$LAST_BUILT_VERSION" >> $GITHUB_ENV
          
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: maojiaxing
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Inspect existing manifest
        id: inspect-manifest
        run: |
          # 获取现有 manifest 的详细信息
          docker manifest inspect maojiaxing/vscode-cli:amd64-${{ env.NEW_VERSION }} > amd64-manifest.json
          docker manifest inspect maojiaxing/vscode-cli:arm64-${{ env.NEW_VERSION }} > arm64-manifest.json

      - name: Extract manifest digests
        id: extract-digest
        run: |
          # 提取 amd64 和 arm64 的 digest
          AMD64_DIGEST=$(jq -r '.manifests[] | select(.platform.architecture=="amd64") | .digest' amd64-manifest.json)
          ARM64_DIGEST=$(jq -r '.manifests[] | select(.platform.architecture=="arm64") | .digest' arm64-manifest.json)
          
          echo "AMD64_DIGEST=$AMD64_DIGEST" >> $GITHUB_ENV
          echo "ARM64_DIGEST=$ARM64_DIGEST" >> $GITHUB_ENV
               
      - name: Create and push Docker manifest
        id: build-and-push-manifest
        if: ${{ env.NEW_VERSION }} != env.LAST_BUILT_VERSION }}
        run: |
          docker manifest create \
            maojiaxing/vscode-cli:${{ env.NEW_VERSION }} \
            --amend maojiaxing/vscode-cli@${{ env.AMD64_DIGEST }} \
            --amend maojiaxing/vscode-cli@${{ env.AMD64_DIGEST }}
            
          docker manifest create \
            maojiaxing/vscode-cli:latest \
            --amend maojiaxing/vscode-cli@${{ env.AMD64_DIGEST }} \
            --amend maojiaxing/vscode-cli@${{ env.AMD64_DIGEST }}

          docker manifest push maojiaxing/vscode-cli:latest
          docker manifest push maojiaxing/vscode-cli:${{ env.NEW_VERSION }}
    
  record-build-version:
    runs-on: ubuntu-latest
    needs: push-image
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download environment file
        uses: actions/download-artifact@v4
        with:
          name: version-file  # 下载上传的环境文件

      - name: Load environment variables
        run: |
          set -o allexport; source version.env; set +o allexport
        
      - name: Update version in repository
        id: record-build-version
        if: ${{ env.NEW_VERSION }} != env.LAST_BUILT_VERSION }}
        run: |
          echo "$NEW_VERSION" > version.txt
          git config --global user.email "maojiaxing.tech@gmail.com"            
          git config --global user.name "GitHub Actions"
          git add version.txt
          git commit -m "Update version to ${{ env.NEW_VERSION }}"
          git push
