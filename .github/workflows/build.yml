name: Build and Push VS Code CLI Docker Image

on:
  schedule:
    - cron: '0 0 * * *'  # 每天午夜触发
  workflow_dispatch:  # 允许手动触发

jobs:
  check-version:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Check VS Code CLI newest version
        id: check-version
        run: |
          LATEST_RELEASE=$(curl -s https://api.github.com/repos/microsoft/vscode/releases/latest)
          NEW_VERSION=$(echo $LATEST_RELEASE | jq -r '.tag_name')
          echo "New VS Code CLI version: $NEW_VERSION"
          echo "new-version=$NEW_VERSION" >> $GITHUB_ENV

      - name: Read last built version
        id: read-last-version
        run: |
          if [ -f version.txt ]; then
            LAST_BUILT_VERSION=$(cat version.txt)
          else
            LAST_BUILT_VERSION="none"
          fi
          echo "last-built-version=$LAST_BUILT_VERSION" >> $GITHUB_ENV

  build-and-push:
    runs-on: ubuntu-latest
    needs: check-version
    if: ${{ env.new-version != env.last-built-version }}  # 判断版本号是否不同
    strategy:
      matrix:
        platform: [x64, arm64]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Build and push Docker image
        id: build-and-push
        run: |
          docker buildx build \
            --platform linux/${{ matrix.platform }} \
            --tag your-dockerhub-username/vscode-cli:latest \
            --tag your-dockerhub-username/vscode-cli:${{ env.new-version }} \
            --build-arg VSCODE_CLI_PLATFORM=${{ matrix.platform }} \
            --file ./Dockerfile \
            --push .

      - name: Update version in repository
        run: |
          echo "${{ env.new-version }}" > version.txt
          git config --global user.email "you@example.com"
          git config --global user.name "GitHub Actions"
          git add version.txt
          git commit -m "Update version to ${{ env.new-version }}"
          git push
