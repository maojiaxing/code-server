name: Build and Push VS Code CLI Docker Image

on:
  schedule:
    - cron: '0 0 * * *'  # 每天午夜触发
  workflow_dispatch:  # 允许手动触发

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      new-version: ${{ steps.check-version.outputs.new-version }}
    steps:
      - name: Check VS Code CLI version
        id: check-version
        run: |
          LATEST_RELEASE=$(curl -s https://api.github.com/repos/microsoft/vscode/releases/latest) NEW_VERSION=$(echo $LATEST_RELEASE | jq -r '.tag_name')
          echo "New VS Code CLI version: $NEW_VERSION"
          echo "::set-output name=new-version::$NEW_VERSION"
  build-and_push:
    runs-on: ubuntu-latest
    needs: check-version
    if: needs.check-version.outputs.new-version != '${{ github.event.inputs.current_version }}'
    strategy:
      matrix:
        platform: [x64, arm64]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        id: build
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          platforms: ${{ matrix.platform }}
          push: true 
          tags: maojiaxing/vscode-cli:latest,maojiaxing/vscode-cli:${{ needs.check-version.outputs.new-version }}
          build-args: |
            VSCODE_CLI_VERSION=${{ needs.check-version.outputs.new-version }}

  
